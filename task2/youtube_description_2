Легкая часть (достаточно на "хор")

В данной задаче вам нужно будет продолжить анализ данных о видео на YouTube. Информация об имени категории видео содержится в файле RU_category_id.json. Код для чтения этого файла и извлечения из него необходимой информации в виде pandas-таблицы уже написан в шаблоне решения.

Задача состоит из 6 пунктов, под каждый из которых предусмотрена соответствующая функция в классе YouTube2:

Загрузите датасет с данными о видео в российском сегменте Youtube. Код для формирования таблицы с категориями уже написан. При считывании таблицы trends_df не забудьте правильно распознать дату.
Объедините две таблицы на основе индекса категории. Это можно сделать с помощью метода merge. Далее используйте названия категорий, а не id.
Составьте сводную таблицу о количестве просмотров по дням для каждой категории видео с помощью функции pivot_table. Пропуски заменять не нужно.
Визуализируйте таблицу с помощью heatmap. Для информативности поделите все числа на 
1
0
6
10 
6
  и не забудьте про подписи в клетках heatmap.
Сделайте аналогичную сводную таблицу, добавив суммы по строкам и столбцам, назвав их "Всего просмотров". Пропуски заменять не нужно.
Визуализируйте таблицу с помощью heatmap. Для информативности поделите все числа на 
1
0
6
10 
6
 . При построении, аналогичном пункту 3, график получается неинформативным. Вам нужно это исправить.
Шаблон решения:

import json
import typing as tp

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from datetime import datetime
from matplotlib.figure import Figure


class YouTube2:
    def __init__( # task0
        self,
        trends_df_path: str="RUvideos_short.csv",
        categories_df_path: str="RU_category_id.json"
    ):
      self.trends_df = # read trends df

      with open(categories_df_path) as json_file:
          json_data = json.load(json_file)
          
      self.categories_df = pd.DataFrame(columns=['id', 'name'])

      for item in json_data['items']:
          self.categories_df = self.categories_df.append(
              {'id': int(item['id']),
              'name': item['snippet']['title']},
              ignore_index=True
          )
          
      self.categories_df['id'] = self.categories_df['id'].astype(int)


    def task1(self) -> pd.DataFrame:
      return ...
    

    def task2(self) -> pd.DataFrame:
      return ...


    def task3(self) -> Figure:
      ...
      return plt.gcf()


    def task4(self) -> pd.DataFrame:
      return ...


    def task5(self) -> Figure:
      ...
      return plt.gcf()
Присылать нужно только код класса с подключением необходимых библиотек. Использовать библиотеки, которых нет в шаблоне, запрещается.
Во время тестирования создается только один объект класса решения. Все подзадачи запускаются по порядку.
Все функции для пунктов с графиками должны возвращать matplotlib.figure.Figure, на котором рисовался график. В шаблоне уже есть пример как это сделать через plt.gcf(), но при этом нельзя вызывать plt.show(), иначе холст сбросится и на проверку пойдёт пустой.
Решение будет протестировано на двух наборах тестов. В случае ошибок на первом наборе вы сможете увидеть данные теста, данные вторых тестов скрыты. Итоговые баллы выставляются за каждый пройденный тест.
